<?php

/**
 * @file
 * Contains rhd_eloqua_embed.module.
 */

use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function rhd_eloqua_embed_theme($existing, $type, $theme, $path) {
  return [
    'rhd_eloqua_embed_page' => [
      'variables' => [
        'eloqua_json' => NULL,
        'html_attributes' => NULL,
        'redirect_url' => NULL,
        'overlabel' => FALSE,
      ],
      'template' => 'rhd-eloqua-embed-page',
    ],
  ];
}

/**
 * Implements preprocess_assembly().
 */
function rhd_eloqua_embed_preprocess_assembly(&$variables) {
  $assembly = $variables['assembly'];

  if ($assembly->hasField('field_eloqua_json')) {

    $variables['eloqua_assembly_id'] = $assembly->id();
    $options = [];

    if (isset($variables['elements']['#parent']) && !empty($variables['elements']['#parent'])) {
      $parent = $variables['elements']['#parent'];
      if ($parent['entity_type'] == 'assembly' && $parent['entity']->bundle() == 'cta_form') {

        $styles = $parent['entity']->get('visual_styles')->getValue();
        foreach ($styles as $style) {
          if (in_array($style['value'], ['centered'])) {
            $options['class'][] = 'centered';
          }
          if (in_array($style['value'], ['dark'])) {
            $options['class'][] = 'dark';
          }
          if (in_array($style['value'], ['inline'])) {
            $options['class'][] = 'inline';
          }
          if (in_array($style['value'], ['overlabel'])) {
            $options['class'][] = 'overlabel';
          }
          if (in_array($style['value'], ['eloqua-two-col'])) {
            $options['class'][] = 'eloqua-two-col';
          }
        }
      }
    }

    $queryArray = [
      'query' => [
        'options' => $options,
        'no_cache' => _create_guid(),
      ],
    ];
    $tmpEloquaUrl = Url::fromRoute('rhd_eloqua_embed.getForm', ['assembly' => $assembly->id()], $queryArray);
    $variables['eloqua_iframe_url'] = $tmpEloquaUrl;
  }
}

/**
 * Returns a new random guid.
 */
function _create_guid() {
  // Create a token.
  $token = $_SERVER['HTTP_HOST'];
  $token .= $_SERVER['REQUEST_URI'];
  $token .= uniqid(rand(), TRUE);
  // GUID is 128-bit hex.
  $hash = strtoupper(md5($token));
  // Create formatted GUID.
  $guid = '';
  // GUID format is XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX for readability.
  $guid .= substr($hash, 0, 8) .
    '-' .
    substr($hash, 8, 4) .
    '-' .
    substr($hash, 12, 4) .
    '-' .
    substr($hash, 16, 4) .
    '-' .
    substr($hash, 20, 12);

  return $guid;
}
