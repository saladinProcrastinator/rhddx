<?php

/**
 * @file
 * 
 * For initial use, this only imports a script to handle Katacoda-specific token functionality
 */

use Drupal\taxonomy\Entity\Term;

 include_once 'rhd_katacoda.tokens.inc';

/**
 * Implements template_preprocess_node().
 */
function rhd_katacoda_preprocess_node(array &$variables) {
  $variables['node'] = $variables['elements']['#node'];
  $node = $variables['node'];

  // Katacoda Course Page â€“ Additional Field Display
  //
  // Adds the body/description content of an entity reference to the lesson
  // display list individual content cards.
  if ($node->getType() == 'katacoda_course') {
    // Get page title.
    $course_title = $node->title->value;
    // Get description for the hero.
    $course_description = $node->body->value;
    // Course 'read more' link.
    $course_read_more_link = $node->field_katacoda_hero_more_link->value;
    // We will use this variable to add up the entire time of a course.
    $course_time = 0;

    $audiences = $node->field_katacoda_course_audience->getValue();
    $audience_names = [];

    foreach ($audiences as $audience) {
      $audience_names[] = Term::load($audience['target_id'])->getName();
    }

    $variables['katacoda_course_info']['course_title']       = $course_title;
    $variables['katacoda_course_info']['course_description'] = $course_description;
    $variables['katacoda_course_info']['course_read_more']   = $course_read_more_link;

    // Set the array for included Katacoda scenarios.
    $course_content = [];

    if (!$node->field_katacoda_course_lessons->isEmpty()) {
      // Retrieve the IDs of the included Katacoda Courses to display information and links.
      $lessons = $node->field_katacoda_course_lessons->getValue();
      $lesson_ids = [];

      foreach($lessons as $lesson) {
        $lesson_ids[] = $lesson['target_id'];
      }

      // Retrieve Lesson IDs.
      $lesson_entity = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->loadMultiple($lesson_ids);

      // Gather information for each lesson node.
      foreach($lesson_entity as $k=>$v) {
       /** 
        * Retrieve a path alias. Can also be accomplished this way:
        * $nid = $v->nid->value;
        * $alias = \Drupal::service('path.alias_manager')->getAliasByPath('/node/'.$nid);
        */
        $url_path_alias = $v->toUrl()->toString();

        // Create an array of data from each "child" entity reference to add to
        // $variables and be made renderable in tiles in the Individual Course
        // page template. The item 'display_author' is entered as a field and
        // might be different from the content author within Drupal.
        $katacoda_scenarios[] = [
         'title'              => $v->title->value,
         'description'        => $v->body->value,
         'lesson_path_alias'  => $url_path_alias,
         'scenario_time'      => $v->field_katacoda_scenario_time->value,
         'skill_level'        => $v->field_katacoda_skill_level->value,
         'display_author'     => $v->field_katacoda_scenario_author->value,
        ];

        // Add each scenario_time to the total course_time.
        $course_time += (int) $v->field_katacoda_scenario_time->value;
      }

      $variables['katacoda_course_info']['courses'] = $katacoda_scenarios;
    }

    $variables['katacoda_course_info']['audiences'] = $audience_names;
    $variables['katacoda_course_info']['course_time'] = $course_time;
  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 * 
 * Prepares variables for `breadcrumb.html.twig`. Removes the "Home" link from
 * the Breadcrumb path in Katacoda-related content.
 */
function rhdp_preprocess_breadcrumb(&$variables){
  // Check node type.
  $node = \Drupal::request()->attributes->get('node');
  $node_type = $node->getType();
  $types = ['katacoda_course','katacoda_individual_lesson'];

  if ($node && in_array($node_type,$types) === TRUE) {
    // Remove 'Home' (1st member) from breadcrumb trail.
    if (count($variables['breadcrumb'])) {
      array_shift($variables['breadcrumb']);
      // Append the current page title to the end of the breadcrumb trail.
      $variables['breadcrumb'][] = ['text' => $node->getTitle()];
    }
  }
}
