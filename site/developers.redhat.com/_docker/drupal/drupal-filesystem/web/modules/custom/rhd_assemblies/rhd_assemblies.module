<?php

/**
 * @file
 * Contains rhd_assemblies.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;

/**
 * Implements hook_help().
 */
function rhd_assemblies_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the rhd_assemblies module.
    case 'help.page.rhd_assemblies':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom assemblies for RHD') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function rhd_assemblies_theme($existing, $type, $theme, $path) {
  $theme = [];

  // Registers a custom template and variables for Wordpress Post Teaser.
  $theme['wordpress_post_dynamic_content_list_item'] = [
    'template' => 'wordpress-post-teaser',
    'variables' => [
      'post' => NULL,
      'media' => NULL,
      'categories' => NULL,
      'date' => NULL,
    ],
  ];

  // Registers a custom template and variables for Wordpress Post Teaser.
  $theme['wordpress_post_compact_dynamic_article_list_item'] = [
    'template' => 'wordpress-post-compact-dynamic-article-list-item',
    'variables' => [
      'post' => NULL,
    ],
  ];

  // Registers a custom template and variables for Wordpress Post Card.
  $theme['wordpress_post_card'] = [
    'template' => 'wordpress-post-card',
    'variables' => [
      'post' => NULL,
      'media' => NULL,
    ],
  ];

  // Registers a custom template and variables for Wordpress Post Tile.
  $theme['wordpress_post_tile'] = [
    'template' => 'wordpress-post-tile',
    'variables' => [
      'post' => NULL,
      'media' => NULL,
    ],
  ];

  return $theme;
}

/**
 * Implements hook_preprocess_ID().
 */
function rhd_assemblies_preprocess_wordpress_post_compact_dynamic_article_list_item(&$variables) {
  $variables['rhd_domain'] = FALSE;
  $variables['absolute_url'] = FALSE;

  $current_path = \Drupal::service('path.current')->getPath();
  $url = Url::fromUri("internal:$current_path");
  $variables['absolute_url'] = $url->setAbsolute()->toString();

  // don't run comment js on this entity
  // if it isn't a redhat domain or the current domain.
  if ($_SERVER['SERVER_NAME']) {
    $host = parse_url($variables['absolute_url'], PHP_URL_HOST);
    if ($host === $_SERVER['SERVER_NAME'] && !(strpos($host, 'redhat.com') === FALSE)) {
      $variables['rhd_domain'] = TRUE;
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function rhd_assemblies_entity_presave(EntityInterface $entity) {
  // The entity is either a Node Reference or Wordpress Post Reference assembly.
  if ($entity->getEntityTypeId() == 'assembly' && in_array($entity->bundle(), ['node_reference', 'wordpress_post_reference'])) {

    // Node Reference assembly.
    if ($entity->bundle() == 'node_reference') {
      // Set the name of the Node Reference assembly using the title/label of
      // referenced node.
      $field = $entity->get('field_node_reference')->getValue();
      $node_id = reset($field)['target_id'];
      $node = Node::load($node_id);
      $title = $node->label();
      $entity->set('name', $title);
    }

    // Wordpress Post Reference assembly.
    if ($entity->bundle() == 'wordpress_post_reference') {
      // Set the name of the Wordpress Post Reference assembly using the
      // title/label of the reference Wordpress post.
      $field = $entity->get('field_post_reference')->getValue();
      $title = reset($field)['title'];
      $entity->set('name', $title);
    }
  }
}

/**
 * Implements hook_preprocess_assembly().
 */
function rhd_assemblies_preprocess_assembly(&$variables) {
  // Retrieve the parent entity of this assembly.
  $parent = $variables['elements']['#parent'];

  if ($parent) {
    // Make assembly ID match pattern used for on page navigation.
    $id = $variables['elements']['#assembly']->id();
    $css_id = Html::cleanCssIdentifier('assembly-' . $parent['field_name'] . '-' . $id);
    $variables['attributes']->offsetSet('id', $css_id);
  }
}

/**
 * Implements hook_form_ID_alter().
 */
function rhd_assemblies_form_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'node_external_url_alias_validation';
}

/**
 * Implements hook_form_alter().
 */
function rhd_assemblies_form_alter(array &$form, FormStateInterface &$form_state, $form_id) {
  switch ($form_id) {
    case 'node_article_form':
    case 'node_article_edit_form':
    case 'node_assembly_page_form':
    case 'node_assembly_page_edit_form':
    case 'node_author_form':
    case 'node_author_edit_form':
    case 'node_books_form':
    case 'node_books_edit_form':
    case 'node_cheat_sheet_form':
    case 'node_cheat_sheet_edit_form':
    case 'node_coding_resource_form':
    case 'node_coding_resource_edit_form':
    case 'node_connectors_form':
    case 'node_connectors_edit_form':
    case 'node_events_form':
    case 'node_events_edit_form':
    case 'node_katacoda_course_form':
    case 'node_katacoda_course_edit_form':
    case 'node_katacoda_individual_lesson_form':
    case 'node_katacoda_individual_lesson_edit_form':
    case 'node_landing_page_single_offer_form':
    case 'node_landing_page_single_offer_edit_form':
    case 'node_learning_path_form':
    case 'node_learning_path_edit_form':
    case 'node_page_form':
    case 'node_page_edit_form':
    case 'node_promotion_card_form':
    case 'node_promotion_card_edit_form':
    case 'node_promotion_page_form':
    case 'node_promotion_page_edit_form':
    case 'node_rh_certification_exam_form':
    case 'node_rh_certification_exam_edit_form':
    case 'node_rh_training_class_form':
    case 'node_rh_training_class_edit_form':
    case 'node_rhd_microsite_form':
    case 'node_rhd_microsite_edit_form':
    case 'node_rhd_solution_overview_form':
    case 'node_rhd_solution_overview_edit_form':
    case 'node_sub_product_form':
    case 'node_sub_product_edit_form':
    case 'node_topic_page_form':
    case 'node_topic_page_edit_form':
    case 'node_topic_form':
    case 'node_topic_edit_form':
    case 'node_upstream_projects_form':
    case 'node_upstream_projects_edit_form':
    case 'node_video_resource_form':
    case 'node_video_resource_edit_form':
      $form['#validate'][] = 'node_product_route_validation';
      break;

    case 'node_product_form':
    case 'node_product_edit_form':
      $form['#validate'][] = 'product_url_name_validation';
      break;

    case 'view_add_form':
      $form['#validate'][] = 'view_path_validation';
      break;
  }
}

/**
 * Custom validation hook for all node edit forms.
 *
 * Verifies that the alias submitted in the $form_state is not an external URL.
 */
function node_external_url_alias_validation(array &$form, FormStateInterface &$form_state) {
  $submitted_alias = $form_state->getValue('path')[0]['alias'];
  if (strpos($submitted_alias, '://') !== FALSE) {
    $form_state->setErrorByName(
      'path',
      t('The value entered for URL Alias cannot be an external URL. Please choose a different URL Alias or contact the developers.redhat.com development team for assistance.')
    );
  }
}

/**
 * Custom validation hook for new view pages.
 *
 * Verifies that the path submitted in the $form_state is not
 * an external URL and is not already in use.
 */
function view_path_validation(array &$form, FormStateInterface &$form_state) {
  // @TODO: path validation for views_ui_edit_display_form
  // $form['options']['path']['#default_value']
  $view_page_path = $form['displays']['page']['options']['path']['#value'];
  if ($view_page_path) {
    // Validate that the path entered is not an external URL.
    if (strpos($view_page_path, '://') !== FALSE) {
      $form_state->setErrorByName(
        'field_edit_page_path',
        t('The "Path" field cannot be an external URL. Please use a unique internal path or contact the developers.redhat.com development team for assistance.')
      );
    }
    // Validate that the path doesn't start with a forward slash.
    if ($view_page_path[0] == '/') {
      $form_state->setErrorByName(
        'field_edit_page_path',
        t('The "Path" field cannot start with a slash.')
      );
    }
    // Validate that the path entered doesn't already exist.
    // NOTE: does not catch duplicate Views paths.
    $path_exists = \Drupal::service('path.alias_storage')->aliasExists('/' . $view_page_path, 'en');
    if ($path_exists) {
      $form_state->setErrorByName(
        'field_edit_page_path',
        t('The "Path" field contains a path or alias that already exists. Please create a unique path or contact the developers.redhat.com development team for assistance.')
      );
    }
  }
}

/**
 * Custom validation hook for the Product node and node edit forms.
 *
 * Verifies that the field_url_product_name submitted in the $form_state is not
 * already being used by an existing Product node. This is necessary because if
 * a duplicate field_url_product_name exists, there will be a routing conflict.
 */
function product_url_name_validation(array &$form, FormStateInterface &$form_state) {
  // The value of field_url_product_name attempting to be submitted to this
  // node product form.
  $url_product_name = $form_state->getValue('field_url_product_name')[0]['value'];
  $form_nid = $form_state->getFormObject()->getEntity()->id();

  // This query will try to find an existing Product node that has a value
  // of $url_product_name set for the field_url_product_name field.
  $query_nids = \Drupal::entityQuery('node')
    ->condition('type', 'product')
    ->condition('field_url_product_name', $url_product_name)
    ->execute();

  foreach ($query_nids as $query_nid) {
    if ($query_nid != $form_nid) {
      // If an existing Product is already using the value provided for
      // field_url_product_name in $form_state, then we will set an error on
      // the field.
      $form_state->setErrorByName(
        'field_url_product_name',
        t('The value you entered for URL Product Name is already used by an existing Product. This field must be unique across all Products to prevent routing conflicts.')
      );
    }
  }
}

/**
 * Custom validation hook for non-Products nodes to verify a non-Product URL.
 *
 * Verifies that non-Product nodes are not using a route/URL pattern that might
 * conflict with our Product nodes i.e.
 * products/rhel/overview or
 * products/rhamt/download or
 * products/openjdk/getting-started.
 *
 * @see rhd_common.routing.yml
 * @see rhd_assemblies.routing.yml
 */
function node_product_route_validation(array &$form, FormStateInterface &$form_state) {
  $node = $form_state->getFormObject()->getEntity();
  $node_type = $node->getType();

  if ($node_type !== 'product') {
    $url_alias = $form_state->getValue('path')[0]['alias'];
    // Remove preceding '/' character if one exists.
    $url_alias = (isset($url_alias[0]) && $url_alias[0] === '/') ? substr($url_alias, 1) : $url_alias;
    $url_alias_array = explode('/', $url_alias);
    $reserved_product_subpages = [
      'overview',
      'download',
      'getting-started',
      'hello-world',
    ];

    // If this route matches the pattern of one of our reservered product
    // subpages, then we will set an error on the URL Alias field.
    if (is_array($url_alias_array) && count($url_alias_array) === 3 && $url_alias_array[0] === 'products' && in_array($url_alias_array[2], $reserved_product_subpages)) {
      $form_state->setErrorByName(
        'path',
        t('The value you entered for URL Alias conflicts with the URL pattern for either the overview, download or getting-started Product subpage. Please choose a different URL Alias or contact the developers.redhat.com development team for assistance.')
      );
    }
  }
}

include_once 'rhd_assemblies.updates.inc';
