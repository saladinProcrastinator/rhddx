import RHElement from '@rhelements/rhelement';
import RHDPSearchFilterItem from './rhdp-search-filter-item';

export default class RHDPSearchFilterGroup extends RHElement {
    template = el => {
        const tpl = document.createElement("template");
        tpl.innerHTML = `
        <style>
            .secondary {
                display: none;
            }
        </style>
<h6 class="showFilters heading"><span class="group-name">${el.name}</span><span class="toggle"><i class='fa fa-chevron-right' aria-hidden='true'></i></span></h6>
<div class="group">
    <div class="primary">
        <slot name="primary"></slot>
    </div>
    <div class="secondary">
        <slot></slot>
    </div>
    <a href="#" class="more">Show More</a>
</div>`;
        return tpl;
    }
    _key;
    _name;
    _items: RHDPSearchFilterItem[] = [];
    _toggle = false;
    _more = false;

    moreBtn = document.createElement('a');

    get key() {
        return this._key;
    }
    set key(val) {
        if (this._key === val) return;
        this._key = val;
    }

    get name() {
        return this._name;
    }
    set name(val) {
        if (this._name === val) return;
        this._name = val;
        if (this.shadowRoot.querySelector('.group-name')) {
            this.shadowRoot.querySelector('.group-name').innerHTML = this._name;
        }
    }

    get items() {
        return this._items;
    }
    set items(val) {
        if (this._items === val) return;
        this._items = val;
        if (this._items.length > 5) {
            if (!this.shadowRoot.querySelector('.more')) {
                this.shadowRoot.appendChild(this.moreBtn);
            }
        } else {
            if (this.shadowRoot.querySelector('.more')) {
                this.shadowRoot.removeChild(this.shadowRoot.lastChild);
            }
        }
    }

    get toggle() {
        return this._toggle;
    }
    set toggle(val) {
        if (this._toggle === val) return;
        this._toggle = val;
        this.shadowRoot.querySelector('.group').className = this.toggle ? 'group' : 'group hide';
        this.shadowRoot.querySelector('.toggle').className = this.toggle ? 'toggle expand' : 'toggle';
    }

    get more() {
        return this._more;
    }
    set more(val) {
        if (this._more === val) return;
        this._more = val;
        this.shadowRoot.querySelector('.more')['innerText'] = this.more ? 'Show Less' : 'Show More';
        this.shadowRoot.querySelector('.secondary')['style'].display = this.more ? 'block' : 'none';
    }

    constructor() {
        super('rhdp-search-filter-group');

        this.moreBtn.setAttribute('href', '#');
        this.moreBtn.className = 'more';
        this.moreBtn.innerText = 'Show More';
    }

    connectedCallback() {
        super.render(this.template(this));
        this.shadowRoot.querySelector('h6').addEventListener('click', e => {
            e.preventDefault();
            this.toggle = !this.toggle;
        });
        this.shadowRoot.querySelector('.group').addEventListener('click', e => {
            if (e.target['className'].indexOf('more') > -1) {
                e.preventDefault();
                this.more = !this.more;
            }            
        });

        this.toggle = true;
    }

    static get observedAttributes() { 
        return ['name', 'key', 'toggle', 'items', 'more']; 
    }

    attributeChangedCallback(name, oldVal, newVal) {
        this[name] = newVal;
    }
}

customElements.define('rhdp-search-filter-group', RHDPSearchFilterGroup);