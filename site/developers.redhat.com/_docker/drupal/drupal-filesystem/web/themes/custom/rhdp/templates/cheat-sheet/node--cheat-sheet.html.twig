{#
/**
* @file
* Default theme implementation to display a node.
*
* Available variables:
* - node: The node entity with limited access to object properties and methods.
Only "getter" methods (method names starting with "get", "has", or "is")
and a few common methods such as "id" and "label" are available. Calling
other methods (such as node.delete) will result in an exception.
* - label: The title of the node.
* - content: All node items. Use {{ content }} to print them all,
*   or print a subset such as {{ content.field_example }}. Use
*   {{ content|without('field_example') }} to temporarily suppress the printing
*   of a given child element.
* - author_picture: The node author user entity, rendered using the "compact"
*   view mode.
* - metadata: Metadata for this node.
* - date: Themed creation date field.
* - author_name: Themed author name field.
* - url: Direct URL of the current node.
* - display_submitted: Whether submission information should be displayed.
* - attributes: HTML attributes for the containing element.
*   The attributes.class element may contain one or more of the following
*   classes:
*   - node: The current template type (also known as a "theming hook").
*   - node--type-[type]: The current node type. For example, if the node is an
*     "Article" it would result in "node--type-article". Note that the machine
*     name will often be in a short form of the human readable label.
*   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
*     teaser would result in: "node--view-mode-teaser", and
*     full: "node--view-mode-full".
*   The following are controlled through the node publishing options.
*   - node--promoted: Appears on nodes promoted to the front page.
*   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
*     teaser listings.
*   - node--unpublished: Appears on unpublished nodes visible only to site
*     admins.
* - title_attributes: Same as attributes, except applied to the main title
*   tag that appears in the template.
* - content_attributes: Same as attributes, except applied to the main
*   content tag that appears in the template.
* - author_attributes: Same as attributes, except applied to the author of
*   the node tag that appears in the template.
* - title_prefix: Additional output populated by modules, intended to be
*   displayed in front of the main title tag that appears in the template.
* - title_suffix: Additional output populated by modules, intended to be
*   displayed after the main title tag that appears in the template.
* - view_mode: View mode; for example, "teaser" or "full".
* - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
* - page: Flag for the full page state. Will be true if view_mode is 'full'.
* - readmore: Flag for more state. Will be true if the teaser content of the
*   node cannot hold the main body content.
* - logged_in: Flag for authenticated user status. Will be true when the
*   current user is a logged-in member.
* - is_admin: Flag for admin user status. Will be true when the current user
*   is an administrator.
*
* @see template_preprocess_node()
*
* @todo Remove the id attribute (or make it a class), because if that gets
*   rendered twice on a page this is invalid CSS for example: two lists
*   in different view modes.
*
* @ingroup themeable
*/
#}
{% if node.field_exclude_from_search.value == '1' %}
  <noscript>
    <meta name="DCP:WebpageSearchExclude" content="true">
  </noscript>
{% endif %}


<div{{ attributes.addClass(["row", "content"]).setAttribute("id", "rhd-cheat-sheet") }}>
  <span class="dl-outage-msg"></span>
  <div class="row">
    <div class="large-24 medium-24 columns">
        <h4 class="content-type">Cheat Sheet</h4>
        {{ title_prefix }}
        <h2{{ title_attributes.addClass(["cs-title"]) }}>{{ label }}</h2>
        {{ title_suffix }}
        <div class="cs-info">
            <ul>
                <li>
                    {% if content.field_cheat_sheet_author|render|striptags|trim is not empty %}
                        <strong{{ author_attributes }}>By {{content.field_cheat_sheet_author}} </strong>
                    {% endif %}
                </li>
                <li>
                    {% set calc_date = node.published_at %}
                    {% if calc_date and calc_date.value is not empty %}
                        <small>Published: <rh-datetime datetime="{{ calc_date.value|date("c")}}">{{calc_date.value|date("Y-m-d")}}</rh-datetime></small>
                    {% endif %}
                </li>
                <li class="right cs-social">
                    {% include '@rhdp/share.html.twig' %}
                </li>
            </ul>
        </div>
    </div>
  </div>
  <div class="row">
    <div{{ content_attributes.addClass(["large-18", "medium-17", "columns"]) }}>
        {{ content.body }}

        {% if content.field_cheat_sheet_excerpt|render|striptags|trim is not empty %}
            <div class="cs-excerpt">
                <h4>Cheat Sheet Excerpt</h4>
                <span class="open-quote left">&ldquo;</span>
                <span>
                    {{ content.field_cheat_sheet_excerpt }}
                </span>
            </div>
        {% endif %}
        <div class="cta-label">
            <strong>Want to see more? Get the full cheat sheet.</strong>
        </div>
        <a class="button heavy-cta hidden-after-login" href="{{ content.field_cheat_sheet_download_url[0]['#url'] }}">Log in to download</a>
        <a class="button heavy-cta shown-after-login" href="{{ content.field_cheat_sheet_download_url[0]['#url'] }}">Download</a>
    </div>
    <div class="large-6 medium-7 columns cs-tags">
        {% if content.field_cheat_sheet_tags|render|striptags|trim is not empty %}
            <strong>Tags:</strong> {{ content.field_cheat_sheet_tags }}
        {% endif %}
    </div>
  </div>
  <div class="row">
    <div class="large-18 medium-17 columns">
        {{ content.disqus_thread }}
    </div>
  </div>
</div>
