<?php

/**
 * @file
 * Functions to support theming in the RHDP theme.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\node\Entity\Node;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function rhdp_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $node = \Drupal::request()->attributes->get('node');

  if (!is_null($node) && method_exists($node, 'getType')) {
    $new_suggestion = 'page__' . $node->getType();

    if (!in_array($new_suggestion, $suggestions)) {
      $suggestions[] = $new_suggestion;
    }
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Ensures theme suggestions exist for every content type.
 */
function rhdp_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  $found_suggestion_matches = preg_grep("/node__\D+__/", $suggestions);

  // If we have found_suggestion_matches, just return those as they'll be more
  // specific anyway. This does feel kind of hacky, but not sure of a better
  // solution.
  if (!is_null($found_suggestion_matches)) {
    return $suggestions;
  }

  $node = \Drupal::request()->attributes->get('node');

  if (!is_null($node) && method_exists($node, 'getType')) {
    $new_suggestion = 'node__' . $node->getType();

    if (!in_array($new_suggestion, $suggestions)) {
      $suggestions[] = $new_suggestion;
    }
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function rhdp_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $node = \Drupal::request()->attributes->get('node');
  $suggestion = 'block';
  $parts = explode(':', $variables['elements']['#plugin_id']);

  if (!is_null($node) && method_exists($node, 'getType')) {
    $suggestions[] = $suggestion .= '__' . $node->getType();
  }

  while ($part = array_shift($parts)) {
    $suggestions[] = $suggestion .= '__' . strtr($part, '-', '_');
  }

  return $suggestions;
}

/**
 * Implements hook_preprocess_block().
 */
function rhdp_preprocess_block(array &$variables) {
  // Verify that the #id has some non-empty value prior to using it.
  if (!empty($variables['elements']['#id'])) {
    $block_id = $variables['elements']['#id'];

    if ($block_id == 'rhdnavigation_mobile') {
      $variables['attributes']['class'][] = 'rhd-nav-mobile';
    }

    if ($block_id == 'rhdnavigation') {
      $variables['attributes']['class'][] = 'rhd-nav-fixed';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function rhdp_theme_suggestions_toc_responsive_alter(array &$suggestions, array $variables) {
  $node = \Drupal::request()->attributes->get('node');
  $suggestion = 'toc_responsive';
  $parts = explode(':', $variables['elements']['#plugin_id']);

  if (!is_null($node) && method_exists($node, 'getType')) {
    $suggestions[] = $suggestion .= '__' . $node->getType();
  }

  while ($part = array_shift($parts)) {
    $suggestions[] = $suggestion .= '__' . strtr($part, '-', '_');
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function rhdp_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $suggestion = 'taxonomy_term';
  $term = $variables['elements']['#taxonomy_term'];
  $node = \Drupal::request()->attributes->get('node');

  if (!is_null($node) && method_exists($node, 'getType')) {
    $suggestions[] = $suggestion .= '__' . $node->getType();
  }

  $suggestions[] = $suggestion . '__' . $term->bundle();
  $suggestions[] = $suggestion . '__' . $term->id();

  return $suggestions;
}

/**
 * Implements hook_preprocess_html().
 */
function rhdp_preprocess_html(array &$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  // Retrieve the redhat_developers config configuration object once.
  $rhd_config = \Drupal::config('redhat_developers');

  // Retrieve individual config values from the config object.
  $environment = $rhd_config->get('environment');
  $dtm_code = $rhd_config->get('dtm_code');
  $sentry_track = $rhd_config->get('sentry_track');
  $sentry_script = $rhd_config->get('sentry_script');
  $sentry_code = $rhd_config->get('sentry_code');
  $rhd_base_url = $rhd_config->get('rhd_base_url');
  $rhd_final_base_url = $rhd_config->get('rhd_final_base_url');

  $variables['rhd_environment'] = $environment;
  $variables['rhd_dtm_code'] = $dtm_code;
  $variables['rhd_dtm_script'] = redhat_www_ddo_default(\Drupal::request()->attributes->get('node'));
  $variables['rhd_sentry_track'] = $sentry_track;
  $variables['rhd_sentry_script'] = $sentry_script;
  $variables['rhd_sentry_code'] = $sentry_code;
  $variables['rhd_base_url'] = $rhd_base_url;
  $variables['rhd_final_base_url'] = $rhd_final_base_url;
  $variables['current_path'] = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

  if ($environment != 'prod') {
    $referrer = [
      '#tag' => 'meta',
      '#attributes' => [
        // Set name for element.
        'name' => 'referrer',
        // Set value for title.
        'value' => 'unsafe-url',
      ],
    ];

    $variables['page']['#attached']['html_head'][] = [$referrer, 'referrer'];
  }
}

/**
 * Implements hook_js_settings_alter().
 */
function rhdp_js_settings_alter(array &$settings, AttachedAssetsInterface $assets) {
  $env_settings = \Drupal::config('redhat_developers');

  $settings['rhd'] = [];
  $rhd_settings = &$settings['rhd'];

  $rhd_settings['urls'] = [];
  $rhd_settings['urls']['final_base_url'] = $env_settings->get('rhd_final_base_url');

  $rhd_settings['downloadManager'] = [];
  $rhd_settings['downloadManager']['baseUrl'] = $env_settings->get('downloadManager')['baseUrl'];
  $rhd_settings['dcp']['baseProtocolRelativeUrl'] = $env_settings->get('searchisko')['protocol'] . "://" . $env_settings->get('searchisko')['host'] . ":"
      . $env_settings->get('searchisko')['port'];

  $rhd_settings['keycloak'] = [];
  $rhd_settings['keycloak']['accountUrl'] = $env_settings->get('keycloak')['accountUrl'];
  $rhd_settings['keycloak']['authUrl'] = $env_settings->get('keycloak')['authUrl'];
  $rhd_settings['keycloak']['client_id'] = $env_settings->get('keycloak')['client_id'];
  $rhd_settings['keycloak']['realm'] = $env_settings->get('keycloak')['realm'];

  $rhd_settings['swel'] = [];
  $rhd_settings['swel']['url'] = $env_settings->get('swel')['url'];

  $rhd_settings['fusion'] = [];
  $rhd_settings['fusion']['url'] = $env_settings->get('fusion')['url'];

  $theme_path = drupal_get_path('theme', 'rhdp');

  $rhd_settings['templates'] = [];
  $template = file_get_contents($theme_path . '/templates/client-side/book.html.twig');
  $rhd_settings['templates']['book'] = $template;

  $template = file_get_contents($theme_path . '/templates/client-side/mini_buzz.html.twig');
  $rhd_settings['templates']['miniBuzz'] = $template;

  $template = file_get_contents($theme_path . '/templates/client-side/product_buzz.html.twig');
  $rhd_settings['templates']['productBuzz'] = $template;

  $template = file_get_contents($theme_path . '/templates/client-side/buzz.html.twig');
  $rhd_settings['templates']['buzz'] = $template;

  $template = file_get_contents($theme_path . '/templates/client-side/terms_conditions.html.twig');
  $rhd_settings['templates']['termsConditions'] = $template;

  $template = file_get_contents($theme_path . '/templates/client-side/product_connector.html.twig');
  $rhd_settings['templates']['connector'] = $template;

  $template = file_get_contents($theme_path . '/templates/client-side/product_stackoverflow_template.html.twig');
  $rhd_settings['templates']['productStackoverflowTemplate'] = $template;

  $template = file_get_contents($theme_path . '/templates/client-side/search_page_template.html.twig');
  $rhd_settings['templates']['searchPageTemplate'] = $template;

  $template = file_get_contents($theme_path . '/templates/client-side/stackoverflow_template.html.twig');
  $rhd_settings['templates']['stackoverflowTemplate'] = $template;
}

/**
 * Implements template_preprocess_page().
 */
function rhdp_preprocess_page(&$variables) {

  $node = isset($variables['node']) ? $variables['node'] : FALSE;

  if ($node && get_class($node) === 'Drupal\node\Entity\Node') {
    $alias = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $node->id());

    if ($alias == '/') {
      $variables['is_front'] = TRUE;
    }
  }

  // Pull out assemblies to page level for solp.
  if ($node && get_class($node) === 'Drupal\node\Entity\Node' && $node->getType() == 'landing_page_single_offer') {
    foreach (['hero'] as $field) {
      $fieldname = 'field_' . $field;
      if (isset($node->$fieldname)) {
        $viewBuilder = \Drupal::entityTypeManager()->getViewBuilder('node');
        $output = $viewBuilder->viewField($node->$fieldname, 'full');
        $output['#cache']['tags'] = $node->getCacheTags();
        $variables['page'][$field] = $output;
      }
    }
  }

}

/**
 * Implements template_preprocess_node().
 */
function rhdp_preprocess_node(array &$variables) {
  $variables['node'] = $variables['elements']['#node'];
  $node = $variables['node'];

  // Video Resource content type.
  if ($node->getType() == 'video_resource') {
    // Teaser view mode.
    if ($variables['view_mode'] == 'teaser') {
      if (isset($node->field_video_thumbnail_url)) {
        $video_thumbnail_url = $node->get('field_video_thumbnail_url')->getValue();
        $variables['video_thumbnail_url'] = ($video_thumbnail_url) ? $video_thumbnail_url[0]['value'] : FALSE;
      }
    }
    // Tile view mode.
    if ($variables['view_mode'] == 'tile') {
      $node_title = $node->label();
      $variables['node_title'] = str_replace('"', '', $node_title);
    }
  }

  // Author content type.
  if ($node->getType() == 'author') {
    $variables['author_name'] = $node->getTitle();
    $variables['author_articles'] = views_embed_view('author_articles');
    $variables['social_links'] = FALSE;
    $social_facebook = $node->get('field_facebook')->getValue();
    $social_github = $node->get('field_github')->getValue();
    $social_linkedin = $node->get('field_linkedin')->getValue();
    $social_twitter = $node->get('field_twitter')->getValue();
    $social_youtube = $node->get('field_youtube')->getValue();
    $variables['social_github'] = ($social_github) ? $social_github[0]['uri'] : FALSE;
    if ($social_facebook || $social_github || $social_linkedin || $social_twitter || $social_youtube) {
      $variables['social_links'] = TRUE;
      $variables['social_facebook'] = ($social_facebook) ? $social_facebook[0]['uri'] : FALSE;
      $variables['social_linkedin'] = ($social_linkedin) ? $social_linkedin[0]['uri'] : FALSE;
      $variables['social_twitter'] = ($social_twitter) ? $social_twitter[0]['uri'] : FALSE;
      $variables['social_youtube'] = ($social_youtube) ? $social_youtube[0]['uri'] : FALSE;
    }
  }

  // Article content type.
  if ($node->getType() == 'article') {
    $variables['has_hero'] = FALSE;
    $variables['author_location'] = 'left';
    $type = $node->get('field_article_type')->getValue();
    if ($type && !empty($type) && isset($variables['content']['field_image'])) {
      $type = $type[0]['value'];
      if ($type == 'opinion') {
        $variables['has_hero'] = TRUE;
        $variables['author_location'] = 'right';
        $variables['content']['field_image'][0]['#image_style'] = 'hero';
      }
    }
    $hide_toc = $node->get('field_hide_toc')->getValue();

    // Verify that getValue() retrieves a field with a set value.
    if (isset($hide_toc[0])) {
      $variables['hide_toc'] = ($hide_toc[0]['value'] == 1) ? TRUE : FALSE;
    }
    else {
      $variables['hide_toc'] = FALSE;
    }
  }

  // Events content type.
  if ($node->getType() == 'events') {
    $variables['event_title'] = $node->getTitle();
    $variables['event_description'] = $variables['content']['field_description'][0]['#text'];
    $variables['event_url'] = $node->hasField('field_more_details') ? $node->get('field_more_details')->getValue()[0]['uri'] : '';

    // TODO: Fix Duplicate Logic: This will need to be refactored (see preprocess_assembly)
    // Note: Also will not work properly without search and replace on export.
    if ($node->hasField('field_event_background_image')) {
      $image_value = $node->get('field_event_background_image')->getValue();
      if ($image_value) {
        $file_id = $image_value[0]['target_id'];
        $uri = File::load($file_id)->getFileUri();
        $variables['event_image_url'] = file_create_url($uri);
      }
    }

    // Teaser view mode.
    if ($variables['view_mode'] == 'teaser') {
      $node_title = $node->label();
      $variables['node_title'] = str_replace('"', '', $node_title);
    }
  }

  // Product content type and Featured Tile view mode.
  if ($node->getType() == 'product' && $variables['view_mode'] == 'featured_tile') {
    $product_code = $node->get('field_product_machine_name')->getValue();

    if (count($product_code)) {
      $product_code = reset($product_code);
      $variables['logo_link'] = \Drupal::service('path.alias_manager')->getAliasByPath('/products/' . $product_code['value']);
    }

    $variables['cta_url'] = FALSE;
    $variables['cta_title'] = ['#markup' => 'Learn More'];
    $cta_field = $node->get('field_call_to_action_link')->getValue();

    if (count($cta_field)) {
      $cta_field = reset($cta_field);
      $variables['cta_title']['#markup'] = $cta_field['title'];
      $url = Url::fromUri($cta_field['uri']);
      $variables['cta_url']['#markup'] = $url->toString();

      if (!$url->isExternal()) {
        $variables['cta_url']['#markup'] = \Drupal::service('path.alias_manager')->getAliasByPath($url->toString());
      }
    }
  }

  // Product content type and Product Download Page view mode.
  if ($node->getType() == 'product' && $variables['view_mode'] == 'product_download_page') {
    if (isset($node->field_product_machine_name)) {
      $product_code = $node->get('field_product_machine_name')->value;

      // Retrieve the data on this product from Download Manager.
      $content = \Drupal::service('rhd_assemblies.download_manager_api')->getContentById($product_code);

      // Build an array of the versions of this product.
      foreach ($content[0]->productVersions as $key => $version) {
        $versions[$key] = $version;

        foreach ($version->files as $file_key => $file) {
          $versions[$key]->files[$file_key]->fileSize = format_size($file->fileSize)->__toString();
        }
      }

      $variables['versions'] = $versions;
      $variables['featured'] = $content[0]->featuredArtifact;
    }
  }

  // Add icon for 'login required' resources.
  if ($variables['view_mode'] == 'card') {
    $variables['login_req'] = FALSE;

    foreach (['field_book_url', 'field_cheat_sheet_download_url', 'field_source_link', 'field_pdf_link', 'field_mobi_link', 'field_epub'] as $field) {
      if ($node->hasField($field)) {
        $ext_url = $node->get($field)->getValue();
        if (count($ext_url)) {
          $ext_url_uri = reset($ext_url)['uri'];
          if (strpos($ext_url_uri, 'developers.redhat.com/download-manager/') !== FALSE) {
            $variables['login_req'] = TRUE;
            // We have a download-manager link break loop no need to continue!
            break;
          }
        }
      }
    }
  }

  // Learning Path content type and Card view mode.
  if ($variables['view_mode'] == 'card' && $node->getType() == 'learning_path') {
    $labelmap = ['one', 'two', 'three', 'four', 'five', 'six'];
    $lp_content = $node->get('field_learning_path_content_item')->getValue();

    for ($i = 0; $i < 2 && isset($lp_content[$i]); $i++) {
      $ref = Node::load($lp_content[$i]['target_id']);
      $variables['content']['lessons'][] = [
        'label' => ['#markup' => 'Lesson ' . $labelmap[$i]],
        'title' => ['#markup' => $ref->label()],
      ];
    }
  }

  // Books content type and Learning Path Card view mode.
  if ($node->getType() == 'books' && $variables['view_mode'] == 'learning_path_card') {
    $variables['interval'] = '';
    // Ensure the field value is not null.
    if ($node->get('field_read_time')->getValue()) {
      $read_time = $node->get('field_read_time')->getValue();
      $variables['interval'] = $read_time[0]['interval'] . ' ' . $read_time[0]['period'];
      // Make it plural if the interval is greater than 1.
      if ($read_time[0]['interval'] > 1) {
        $variables['interval'] .= 's';
      }
    }
  }

  // Cheat Sheet content type and Learning Path Card view mode.
  if ($node->getType() == 'cheat_sheet' && $variables['view_mode'] == 'learning_path_card') {
    // Ensure the field value is not null.
    if ($node->get('field_read_time')->getValue()) {
      $read_time = $node->get('field_read_time')->getValue();
      $variables['interval'] = $read_time[0]['interval'] . ' ' . $read_time[0]['period'];
      // Make it plural if the interval is greater than 1.
      if ($read_time[0]['interval'] > 1) {
        $variables['interval'] .= 's';
      }
    }
  }

  // RH Training Class content type and Learning Path Card view mode.
  if ($node->getType() == 'rh_training_class' && $variables['view_mode'] == 'learning_path_card') {
    // Ensure the field value is not null.
    if ($node->get('field_completion_time')->getValue()) {
      $completion_time = $node->get('field_completion_time')->getValue();
      $variables['interval'] = $completion_time[0]['interval'] . ' ' . $completion_time[0]['period'];
      // Make it plural if the interval is greater than 1.
      if ($completion_time[0]['interval'] > 1) {
        $variables['interval'] .= 's';
      }
    }
  }

  // Video Resource content type and Learning Path Card view mode.
  if ($node->getType() == 'video_resource' && $variables['view_mode'] == 'learning_path_card') {
    // Ensure the field value is not null.
    if ($node->get('field_duration')->getValue()) {
      $duration = $node->get('field_duration')->getValue();
      $variables['interval'] = $duration[0]['interval'] . ' ' . $duration[0]['period'];
      // Make it plural if the interval is greater than 1.
      if ($duration[0]['interval'] > 1) {
        $variables['interval'] .= 's';
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph__PARAGRAPH_TYPE().
 */
function rhdp_preprocess_paragraph__connectors(&$variables) {
  $block = Block::load('views_block__connectors_rest_export_connectors_rest_export_block');
  $render = \Drupal::entityTypeManager()
    ->getViewBuilder('block')
    ->view($block);

  $variables['connectors_block'] = $render;
}

/**
 * Creates a digital data object (DDO) for Adobe Dynamic Tag Management (DTM).
 */
function redhat_www_ddo_default($node) {
  $request = \Drupal::request();
  $siteerror = \Drupal::configFactory()->get('system.site')->get('page.404');
  $errorType = "";
  $errorMessage = "";
  $ddo_language = "";
  $ddo_pageID = "";
  $ddo_title = "";

  if (!is_null($node)) {
    if ($siteerror == '/node/' . $node->nid->value) {
      $errorType = "404";
      $errorMessage = "404-error";
    }

    $ddo_language = $node->langcode->value;
    $ddo_pageID = $node->nid->value;
    $ddo_title = $node->title->value;
  }

  $ddo = [
    'page' => [
      'attributes' => [
        'queryParameters' => '',
      ],
      'category' => [
        'contentType' => '',
        'contentSubType' => '',
        'keyPage' => FALSE,
        'keyPageType' => '',
        'pageType' => '',
        'primaryCategory' => '',
        'subCategories' => [],
      ],
      'pageInfo' => [
        'breadCrumbs' => [],
        'cms' => 'RHD CMS 8',
        'destinationURL' => '',
        'errorMessage' => $errorMessage,
        'errorType' => $errorType,
        'language' => $ddo_language,
        'pageID' => $ddo_pageID,
        'contentID' => $ddo_pageID,
        'pageName' => '',
        'referringDomain' => '',
        'referringURL' => '',
        'syndicationIds' => [],
        'sysEnv' => '',
        'title' => $ddo_title,
      ],
      'listing' => [
        'browseFilter' => '',
        'query' => '',
        'queryMethod' => '',
        'refinementType' => '',
        'refinementValue' => '',
        'resultCount' => '',
        'searchType' => '',
      ],
    ],
    'user' => [
      [
        'profile' => [
          [
            'profileInfo' => [
              'accountID' => '',
              'daysSinceLastPurchase' => '',
              'daysSinceRegistration' => '',
              'eloquaGUID' => 'POPULATE ELOQUA ID',
              'keyCloakID' => '',
              'loggedIn' => FALSE,
              'profileID' => '',
              'registered' => FALSE,
              'socialAccountsLinked' => [],
              'subscriptionFrequency' => '',
              'subscriptionLevel' => '',
              'userAgent' => '',
            ],
          ],
        ],
      ],
    ],
    'event' => [],
  ];

  return $ddo;
}

/**
 * Implements template_preprocess_field.
 *
 * Adding our css modifications to the video_embed_field type. Had to modify
 * some things mostly due to our site css so we could get the responsive
 * video to work.
 *
 * Adding another edit for embedded products.
 *
 * @param $variables
 * @param $hook
 */
function rhdp_preprocess_field(&$variables, $hook) {
  if ($variables['field_type'] === 'video_embed_field') {
    $variables['items'][0]['content']['#attached']['library'][] = 'rhdp/video_embed_field.responsive-video';
  }

  // This shouldn't be how we display the related product on coding resources (should it be?)
  if ($variables['field_name'] === 'field_related_product' && isset($variables['items'][0]['content']['#node'])) {
    $node = $variables['items'][0]['content']['#node'];
    $variables['product_name'] = $node->getTitle();
    $variables['product_short_name'] = $node->field_product_short_name->value;

    $product_code = $node->field_product_machine_name->value;
    $overview_url = $node->field_product_pages->referencedEntities()[0]->field_overview_url->value;
    $url_string = str_replace(' ', '-', strtolower($overview_url));
    $url = Url::fromRoute('rhd_common.main_page_controller', [
      'product_code' => $product_code,
      'sub_page' => $url_string,
    ], ['absolute' => TRUE])->toString();
    $variables['overview_url'] = $url;
  }

  if ($variables['field_name'] === 'field_related_product'
    && isset($variables['items'][0]['content']['#type'])
    && $variables['items'][0]['content']['#type'] === 'link') {
    $entity = $variables['items'][0]['content']['#options']['entity'];

    $product_code = $entity->field_product_machine_name->value;
    $overview_url = $entity->field_product_pages->referencedEntities()[0]->field_overview_url->value;
    $url_string = str_replace(' ', '-', strtolower($overview_url));
    $url = Url::fromRoute('rhd_common.main_page_controller', [
      'product_code' => $product_code,
      'sub_page' => $url_string,
    ], []);

    $variables['items'][0]['content']['#url'] = $url;
  }
}

/**
 * Returns a new random guid.
 */
function createGUID() {

  // Create a token
  $token      = $_SERVER['HTTP_HOST'];
  $token     .= $_SERVER['REQUEST_URI'];
  $token     .= uniqid(rand(), true);

  // GUID is 128-bit hex
  $hash        = strtoupper(md5($token));

  // Create formatted GUID
  $guid        = '';

  // GUID format is XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX for readability
  $guid .= substr($hash,  0,  8) .
       '-' .
       substr($hash,  8,  4) .
       '-' .
       substr($hash, 12,  4) .
       '-' .
       substr($hash, 16,  4) .
       '-' .
       substr($hash, 20, 12);

  return $guid;

}
/**
 * Implements hook_preprocess_assembly().
 */
function rhdp_preprocess_assembly(&$variables) {
  $assembly = $variables['elements']['#assembly'];
  $type = $assembly->bundle();
  $variables['background_image_url'] = FALSE;
  $image_value = FALSE;
  $svg_value = FALSE;

  if ($assembly->hasField('field_background_image')) {
    $image_value = $assembly->get('field_background_image')->getValue();
  }

  if ($assembly->hasField('field_background_svg')) {
    $svg_value = $assembly->get('field_background_svg')->getValue();
  }

  if ($svg_value) {
    $file_id = $svg_value[0]['target_id'];
    $uri = File::load($file_id)->getFileUri();
    $variables['background_image_url'] = file_create_url($uri);
    $variables['attributes']->addClass('has-background');
  } else if ($image_value) {
    $file_id = $image_value[0]['target_id'];
    $uri = File::load($file_id)->getFileUri();
    $variables['background_image_url'] = ImageStyle::load('billboard')->buildUrl($uri);
    $variables['attributes']->addClass('has-background');
  }


  if ($assembly->hasField('field_audience_selection')) {
    $field_audience_selection_values = $assembly->get('field_audience_selection')->getValue();
    $variables['audience_selection'] = '';

    if ($field_audience_selection_values) {
      $audience_selection_values = [];

      foreach ($field_audience_selection_values as $field_audience_selection_value) {
        $audience_selection_values[] = $field_audience_selection_value['value'];
      }

      $audience_selection = implode(',', $audience_selection_values);
      $variables['audience_selection'] = " data-audience={$audience_selection}";
    }
  }

  // Code Snippet assembly type.
  if ($type == 'code_snippet') {
    // Code field.
    if ($assembly->hasField('field_code')) {
      // Verify that the field isset before retrieving the value.
      if (isset($assembly->field_code)) {
        $field_code = $assembly->get('field_code')->getValue()[0]['value'];
        $variables['code'] = $field_code;
      }
      $variables['#attached']['library'][] = 'rhdp/highlight-js';
    }
    // Programming Language field.
    if ($assembly->hasField('field_programming_language')) {
      // Verify that the field isset before retrieving the value.
      if (isset($assembly->field_programming_language)) {
        $language = $assembly->get('field_programming_language')->getValue()[0]['value'];
        $variables['language'] = isset($language) ? $language : '';
      }
    }
  }

  // Product Features assembly type.
  if ($type == 'product_comparison_table') {
    // To track the number of columns in the table. We start counting at 1 to
    // account for the release labels.
    $colspan = 1;

    // Features, entity reference revisions (assembly) field.
    if ($assembly->hasField('field_features')) {
      // Create variables to store the features and releases.
      $variables['features'] = [];
      $variables['releases'] = [];

      // Verify that the field isset before retrieving the value.
      if (isset($assembly->field_features)) {
        $features = $assembly->get('field_features')->getValue();
        foreach ($features as $key => $feature) {
          // Retrieve this revision of this assembly.
          $feature_revision = \Drupal::entityTypeManager()
            ->getStorage('assembly')
            ->loadRevision($feature['target_revision_id']);

          // Get the Release term ID from the assembly entity.
          $tid = $feature_revision->get('field_release')->getValue()[0]['target_id'];
          $term = \Drupal::entityTypeManager()
            ->getStorage('taxonomy_term')
            ->load($tid);
          $term_name = $term->getName();

          $variables['releases'][$tid] = $term_name;

          if (isset($feature_revision->field_title)) {
            $title = $feature_revision->get('field_title')->getValue()[0]['value'];
            $variables['features'][$tid][$key]['title'] = $title;
          }
          if (isset($feature_revision->field_link_to_project)) {
            $link = $feature_revision->get('field_link_to_project')->getValue()[0];
            $variables['features'][$tid][$key]['link'] = $link;
          }
          if (isset($feature_revision->field_products_and_projects)) {
            $products_and_projects = $feature_revision->get('field_products_and_projects')->getValue();
            $nids = [];
            // Iterate over the products and projects referenced by this field
            // and assign the nids in an array.
            foreach ($products_and_projects as $entity) {
              $nids[] = $entity['target_id'];
            }

            $variables['features'][$tid][$key]['products_and_projects'] = $nids;
          }
        }
      }
    }
    // Products, entity reference (node) field.
    if ($assembly->hasField('field_products')) {
      // Verify that the field isset before retrieving the value.
      if (isset($assembly->field_products)) {
        $nids = [];
        $variables['products'] = [];
        $products = $assembly->get('field_products')->getValue();

        foreach ($products as $product) {
          $nids[] = $product['target_id'];
          // Keep track of how many columns we will have.
          $colspan += 1;
        }

        $nodes = \Drupal::entityTypeManager()
          ->getStorage('node')
          ->loadMultiple($nids);

        foreach ($nodes as $node) {
          $variables['products'][$node->id()] = [];
          $variables['products'][$node->id()]['title'] = $node->get('title')->getValue()[0]['value'];
          $variables['products'][$node->id()]['cta'] = $node->get('field_call_to_action_link')->getValue()[0];
          if (isset($node->field_image) && isset($node->get('field_image')->getValue()[0])) {
            // Get the Media entity target_id.
            $mid = $node->get('field_image')->getValue()[0]['target_id'];
            // Load the media entity from the id.
            $media_entity = \Drupal::entityTypeManager()
              ->getStorage('media')
              ->load($mid);
            // Build the render array for the logo.
            $logo = \Drupal::entityTypeManager()
              ->getViewBuilder('media')
              ->view($media_entity, 'thumbnail');

            $variables['products'][$node->id()]['logo'] = $logo;
          }
          else {
            $variables['products'][$node->id()]['logo'] = NULL;
          }
        }
      }
    }
    // Sub-Products, entity reference (node) field.
    if ($assembly->hasField('field_sub_products')) {
      // Verify that the field isset before retrieving the value.
      if (isset($assembly->field_sub_products)) {
        $nids = [];
        $variables['sub_products'] = [];
        $sub_products = $assembly->get('field_sub_products')->getValue();

        foreach ($sub_products as $sub_product) {
          $nids[] = $sub_product['target_id'];
          // Keep track of how many columns we will have.
          $colspan += 1;
        }

        $nodes = \Drupal::entityTypeManager()
          ->getStorage('node')
          ->loadMultiple($nids);

        foreach ($nodes as $node) {
          $variables['sub_products'][$node->id()] = [];
          $variables['sub_products'][$node->id()]['title'] = $node->get('title')->getValue()[0]['value'];
          $variables['sub_products'][$node->id()]['cta'] = $node->get('field_cta')->getValue()[0];
          if (isset($node->field_logo) && isset($node->get('field_logo')->getValue()[0])) {
            // Get the Media entity target_id.
            $mid = $node->get('field_logo')->getValue()[0]['target_id'];
            // Load the media entity from the id.
            $media_entity = \Drupal::entityTypeManager()
              ->getStorage('media')
              ->load($mid);
            // Build the render array for the logo.
            $logo = \Drupal::entityTypeManager()
              ->getViewBuilder('media')
              ->view($media_entity, 'thumbnail');

            $variables['sub_products'][$node->id()]['logo'] = $logo;
          }
          else {
            $variables['sub_products'][$node->id()]['logo'] = NULL;
          }
        }
      }
    }
    // Upstream Projects, entity reference (node) field.
    if ($assembly->hasField('field_upstream_projects')) {
      // Verify that the field isset before retrieving the value.
      if (isset($assembly->field_upstream_projects)) {
        $nids = [];
        $upstream_projects = $assembly->get('field_upstream_projects')->getValue();

        foreach ($upstream_projects as $upstream_project) {
          $nids[] = $upstream_project['target_id'];
          // Keep track of how many columns we will have.
          $colspan += 1;
        }

        $nodes = \Drupal::entityTypeManager()
          ->getStorage('node')
          ->loadMultiple($nids);

        foreach ($nodes as $node) {
          $variables['upstream_projects'][$node->id()] = [];
          $variables['upstream_projects'][$node->id()]['title'] = $node->get('title')->getValue()[0]['value'];
          $variables['upstream_projects'][$node->id()]['link_to_project'] = $node->get('field_link_to_project')->getValue()[0];
          $variables['upstream_projects'][$node->id()]['link_to_repo'] = $node->get('field_link_to_repo')->getValue()[0];
          if (isset($node->field_logo) && isset($node->get('field_logo')->getValue()[0])) {
            // Get the Media entity target_id.
            $mid = $node->get('field_logo')->getValue()[0]['target_id'];
            // Load the media entity from the id.
            $media_entity = \Drupal::entityTypeManager()
              ->getStorage('media')
              ->load($mid);
            // Build the render array for the logo.
            $logo = \Drupal::entityTypeManager()
              ->getViewBuilder('media')
              ->view($media_entity, 'thumbnail');

            $variables['upstream_projects'][$node->id()]['logo'] = $logo;
          }
          else {
            $variables['upstream_projects'][$node->id()]['logo'] = NULL;
          }
        }
      }
    }

    $variables['colspan'] = $colspan;
  }

  // Embedded Content assembly type.
  if ($type == 'embedded_content') {
    $field_url = $assembly->get('field_url')->getValue();
    $embed_url = $field_url[0]['uri'];
    $variables['embed_url'] = FALSE;

    if ($embed_url) {
      $variables['embed_url'] = $embed_url;
    }
  }

  // Add Display Type variables for curated_links
  if ($type == 'curated_links'
      && $assembly->hasField('field_display_type_curated_links')) {
    $variables['display_type'] = '';
    $display_type = $assembly->get('field_display_type_curated_links')->getValue()[0]['value'];
    if (strpos($display_type, 'two-col') !== FALSE) {
      $variables['display_type'] = 'two-col';
    }
    else if (strpos($display_type, 'nav-menu') !== FALSE) {
      $variables['display_type'] = 'nav-menu';
    }
  }

  // Add Display Type variables for featured_products
  if ($type == 'featured_products'
      && $assembly->hasField('field_display_type_featured_prod')) {
    $variables['display_type'] = '';
    $display_type = $assembly->get('field_display_type_featured_prod')->getValue()[0]['value'];
    if (strpos($display_type, 'basic') !== FALSE) {
      $variables['display_type'] = 'basic';
    }
    else if (strpos($display_type, 'featured') !== FALSE) {
      $variables['display_type'] = 'featured';
    }
  }

  // Add Display Type variables for featured_products
  if ($type == 'video_hero'
      && $assembly->hasField('field_display_type_video_hero')) {
    $variables['display_type'] = '';
    $display_type = $assembly->get('field_display_type_video_hero')->getValue()[0]['value'];
    if (strpos($display_type, 'full-width-video') !== FALSE) {
      $variables['display_type'] = 'full-width-video';
    }
  }

}

/**
 * Implements hook_preprocess_views_view().
 */
function rhdp_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  $id = $view->storage->id();

  // Taxonomy Term view.
  if ($id == 'taxonomy_term') {
    $variables['title'] = FALSE;
    $title = $view->getTitle();

    if ($title) {
      $variables['title'] = $title;
    }
  }
}

/**
 * Preprocessor for the Product Groups views groups.
 */
function rhdp_preprocess_views_view_grouping__product_groups(&$variables) {
  // Replace Twig HTML comments and unwanted whitespace from the Twig title
  // variable.
  $variables['title'] = preg_replace(
    '/(<!--(.)+-->|\s)/',
    '',
    $variables['title']
  );
}

/**
 * Implements hook_library_info_alter().
 *
 * By default, we will load the Keycloak prod script. On our Stage environment
 * we will set a config object, redhat_developers.keycloak.scriptUrl, that will
 * be the URL path to the Keycloak stage script. If this config object exists,
 * then we know to override the default prod Keycloak script with the Keycloak
 * stage script.
 */
function rhdp_library_info_alter(array &$libraries, $extension) {
  $rhd_config = \Drupal::config('redhat_developers');

  // Verify that the Keycloak config key/value exists and the scriptUrl index
  // exists within that config key/value pair.
  //
  // NOTE: If this is not set, then the library will not be altered, and
  // whatever key/values provides in the RHDP theme's libraries.yml file will
  // be used.
  if ($rhd_config->get('keycloak') && isset($rhd_config->get('keycloak')['scriptUrl'])) {
    // This should return the stage Keycloak script URL on our Stage
    // environment, but otherwise, the config object will not be set, and this
    // will be NULL.
    $keycloak_url = $rhd_config->get('keycloak')['scriptUrl'];

    // Keycloak_url is only set on the Stage environment.
    if ($extension == 'rhdp' && $keycloak_url !== NULL) {
      // Remove the Prod Keycloak script URL from our library.
      unset($libraries['base-theme']['js']['https://sso.redhat.com/auth/js/keycloak.js']);
      // Add the Stage Keycloak script URL to our library.
      $libraries['base-theme']['js'][$keycloak_url] = [
        'type' => 'external',
        'minified' => FALSE,
      ];
    }
  }
}

/**
 * Implements hook_preprocess_views_view_fields().
 */
function rhdp_preprocess_views_view_fields(&$variables) {
  // Properly validates and retrieves the URL and string values that will be
  // used to render links in the connectors_rest_export views_view_fields Twig
  // template.
  //
  // @see views-view-fields--connectors_rest_export--connectors_rest_export_block.html.twig
  if ($variables['view']->id() == 'connectors_rest_export') {
    if (isset($variables['row'])) {
      // Get the Connector Node object.
      $connector = $variables['row']->_entity;

      // field_connector_link_1
      if ($connector->hasField('field_connector_link_1') && !empty($connector->get('field_connector_link_1')[0])) {
        $field_connector_link_1 = $connector->get('field_connector_link_1');
        $field_connector_link_1_url = $field_connector_link_1[0]->getUrl()->toString();
        $field_connector_link_1_text = $connector->get('field_connector_link_1_text')->value;
      }

      // field_connector_link_2
      if ($connector->hasField('field_connector_link_2') && !empty($connector->get('field_connector_link_2')[0])) {
        $field_connector_link_2 = $connector->get('field_connector_link_2');
        $field_connector_link_2_url = $field_connector_link_2[0]->getUrl()->toString();
        $field_connector_link_2_text = $connector->get('field_connector_link_2_text')->value;
      }

      // field_connector_details_url
      if ($connector->hasField('field_connector_details_url') && !empty($connector->get('field_connector_details_url')[0])) {
        $field_connector_details_url = $connector->get('field_connector_details_url');
        $field_connector_details_url_link = $field_connector_details_url[0]->getUrl()->toString();

      }
    }

    // Set variables that will be used to render links in the Twig template.
    $variables['connector_link_1_url'] = isset($field_connector_link_1_url) ? $field_connector_link_1_url : null;
    $variables['connector_link_1_text'] = isset($field_connector_link_1_text) ? $field_connector_link_1_text : null;
    $variables['connector_link_2_url'] = isset($field_connector_link_2_url) ? $field_connector_link_2_url : null;
    $variables['connector_link_2_text'] = isset($field_connector_link_2_text) ? $field_connector_link_2_text : null;
    $variables['connector_details_url_link'] = isset($field_connector_details_url_link) ? $field_connector_details_url_link : null;
  }
}

/**
 * Implements hook_form_alter().
 */
function rhdp_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_login_form') {
    $form['#attached']['library'][] = 'rhdp/drupal-user-login-form';
  }
}
